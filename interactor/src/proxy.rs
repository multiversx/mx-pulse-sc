// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct PulseScProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for PulseScProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = PulseScProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        PulseScProxyMethods { wrapped_tx: tx }
    }
}

pub struct PulseScProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> PulseScProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> PulseScProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> PulseScProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn set_root_hash<
        Arg0: ProxyArg<ManagedByteArray<Env::Api, 32usize>>,
    >(
        self,
        root_hash: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("set_root_hash")
            .argument(&root_hash)
            .original_result()
    }

    pub fn new_poll<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg1: ProxyArg<ManagedVec<Env::Api, ManagedBuffer<Env::Api>>>,
        Arg2: ProxyArg<u64>,
    >(
        self,
        question: Arg0,
        options: Arg1,
        duration: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, usize> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("newPoll")
            .argument(&question)
            .argument(&options)
            .argument(&duration)
            .original_result()
    }

    pub fn end_poll<
        Arg0: ProxyArg<usize>,
    >(
        self,
        poll_index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("endPoll")
            .argument(&poll_index)
            .original_result()
    }

    pub fn vote_poll<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<usize>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<ManagedVec<Env::Api, ManagedByteArray<Env::Api, 32usize>>>,
    >(
        self,
        poll_index: Arg0,
        option_index: Arg1,
        voting_power: Arg2,
        proof: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("vote_poll")
            .argument(&poll_index)
            .argument(&option_index)
            .argument(&voting_power)
            .argument(&proof)
            .original_result()
    }

    pub fn polls<
        Arg0: ProxyArg<usize>,
    >(
        self,
        index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Poll<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPoll")
            .argument(&index)
            .original_result()
    }

    pub fn poll_votes<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<usize>,
    >(
        self,
        poll_index: Arg0,
        option_index: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, usize> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPollVotes")
            .argument(&poll_index)
            .argument(&option_index)
            .original_result()
    }

    pub fn next_available_poll_index(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, usize> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNextAvailablePollIndex")
            .original_result()
    }

    pub fn root_hash(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedByteArray<Env::Api, 32usize>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getRootHash")
            .original_result()
    }

    pub fn get_total_votes<
        Arg0: ProxyArg<usize>,
    >(
        self,
        poll_index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, usize> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTotalVotes")
            .argument(&poll_index)
            .original_result()
    }

    pub fn confirm_voting_power<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<ManagedVec<Env::Api, ManagedByteArray<Env::Api, 32usize>>>,
    >(
        self,
        voting_power: Arg0,
        proof: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("confirmVotingPower")
            .argument(&voting_power)
            .argument(&proof)
            .original_result()
    }

    pub fn pause_endpoint(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("pause")
            .original_result()
    }

    pub fn unpause_endpoint(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unpause")
            .original_result()
    }

    pub fn paused_status(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("isPaused")
            .original_result()
    }

    pub fn is_admin<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("isAdmin")
            .argument(&address)
            .original_result()
    }

    pub fn add_admin<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addAdmin")
            .argument(&address)
            .original_result()
    }

    pub fn remove_admin<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeAdmin")
            .argument(&address)
            .original_result()
    }

    pub fn admins(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAdmins")
            .original_result()
    }
}

#[type_abi]
#[derive(Debug, TopEncode, TopDecode, NestedEncode, NestedDecode)]
pub struct Poll<Api>
where
    Api: ManagedTypeApi,
{
    pub initiator: ManagedAddress<Api>,
    pub question: ManagedBuffer<Api>,
    pub options: ManagedVec<Api, ManagedBuffer<Api>>,
    pub vote_score: ManagedVec<Api, BigUint<Api>>,
    pub end_time: u64,
    pub status: bool,
}
